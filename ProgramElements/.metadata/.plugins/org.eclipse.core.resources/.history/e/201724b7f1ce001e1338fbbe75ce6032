package bussiness_logic;
	import com.tyss.optimize.common.util.CommonConstants;
	import com.tyss.optimize.nlp.util.Nlp;
	import com.tyss.optimize.nlp.util.NlpException;
	import com.tyss.optimize.nlp.util.NlpRequestModel;
	import com.tyss.optimize.nlp.util.NlpResponseModel;
	import com.tyss.optimize.nlp.util.annotation.InputParam;
	import com.tyss.optimize.nlp.util.annotation.InputParams;
	import com.tyss.optimize.nlp.util.annotation.ReturnType;

	import io.appium.java_client.android.AndroidDriver;

	import java.util.Map;
	import java.time.LocalTime;
	import java.util.ArrayList;
	import java.util.List;

	import org.openqa.selenium.WebElement;
	import org.springframework.stereotype.Component;

	@Component("LIC14952_PJT1001_PE_NLP53dde0c2-10c0-4ce7-b919-c3d2a7f78e03")
public class MOB_ValidatingChangeInValue implements Nlp {
		@InputParams({@InputParam(name = "Element", type = "org.openqa.selenium.WebElement"),@InputParam(name = "attribute", type = "java.lang.String"),@InputParam(name = "endTime", type = "java.lang.String")})
		@ReturnType(name = "Return Type", type = "java.lang.String")
		@Override
		public List<String> getTestParameters() throws NlpException {
			List<String> params = new ArrayList<>();
			return params;
		}

		@Override
		public StringBuilder getTestCode() throws NlpException {
			StringBuilder sb = new StringBuilder();
			return sb;
		}
		@Override
		public NlpResponseModel execute(NlpRequestModel nlpRequestModel) throws NlpException {

			NlpResponseModel nlpResponseModel = new NlpResponseModel();
			Map<String, Object> attributes = nlpRequestModel.getAttributes();
			String attribute = (String) attributes.get("attribute");
			String endTime = (String) attributes.get("endTime");

			String value=null;
			String ChangeInValue=null;
			// Your program element business logic goes here ...
			try {
				AndroidDriver driver=(AndroidDriver)nlpRequestModel.getAndroidDriver();
				WebElement Element = (WebElement)attributes.get("Element");
				value = Element.getAttribute(attribute);
				String changeValue = value;
				String inputTime = endTime;
				LocalTime time = LocalTime.parse(inputTime); 
				while(value.equals(changeValue)) {
					LocalTime currentTime = LocalTime.now();
					if (currentTime.isBefore(time)) 
					{
						String value1 = Element.getAttribute(attribute);
						if(!value1.equals(value)) {
							ChangeInValue = Element.getAttribute(attribute);
							changeValue = ChangeInValue;
							nlpResponseModel.setStatus(CommonConstants.pass);
							nlpResponseModel.setMessage("Succesfully captured the change in value"+" "+"value : "+value+" "+"Changed Value : "+ChangeInValue);
							break;
						}
					}
					else {
						nlpResponseModel.setStatus(CommonConstants.fail);
						nlpResponseModel.setMessage("Failed to capture the changed value");
						break;
					}
				}
			}catch(Exception e) {
				nlpResponseModel.setStatus(CommonConstants.fail);
				nlpResponseModel.setMessage("Failed to capture the change in value"+" "+e);
			}
			nlpResponseModel.getAttributes().put("ChangeInValue", ChangeInValue);
			return nlpResponseModel;
		}
	} 

