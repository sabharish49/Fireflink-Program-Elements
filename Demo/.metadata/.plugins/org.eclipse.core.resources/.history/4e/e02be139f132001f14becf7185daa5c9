
package com.tyss.optimize.programelement.LIC3320PJT1002.logics;

import com.tyss.optimize.common.util.CommonConstants;
import com.tyss.optimize.nlp.util.Nlp;
import com.tyss.optimize.nlp.util.NlpException;
import com.tyss.optimize.nlp.util.NlpRequestModel;
import com.tyss.optimize.nlp.util.NlpResponseModel;
import com.tyss.optimize.nlp.util.annotation.InputParam;
import com.tyss.optimize.nlp.util.annotation.InputParams;
import com.tyss.optimize.nlp.util.annotation.ReturnType;
import java.util.Map;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.stereotype.Component;




@Component("LIC3320_PJT1002_PE_NLPad73745f-e7f5-419c-b522-826727eac5da")
public class ApplyFiltersPE implements Nlp {
    @InputParams({@InputParam(name = "string1", type = "java.lang.String")})


      @Override
      public List<String> getTestParameters() throws NlpException {
        List<String> params = new ArrayList<>();
        return params;
      }

      @Override
      public StringBuilder getTestCode() throws NlpException {
        StringBuilder sb = new StringBuilder();
        return sb;
      }
      @Override
      public NlpResponseModel execute(NlpRequestModel nlpRequestModel) throws NlpException {
        
          NlpResponseModel nlpResponseModel = new NlpResponseModel();
          Map<String, Object> attributes = nlpRequestModel.getAttributes();
          String categories = (String) attributes.get("string1");
        

          WebDriver driver=nlpRequestModel.getWebDriver();
          WebDriverWait wait=new WebDriverWait(driver,Duration.ofSeconds(10));
          // Your program element business logic goes here ...
          try {
        	  
      		  String[] individualCategory = categories.split(":");
      		  int count = 0;
      		  for (String string : individualCategory) {
      			String[] values = string.split(";");
      			if (values.length != 1) {
      				String value = values[0];
      				driver.findElement(By.xpath("//button[contains(text(),'" + value + "')]")).click();
      				for (int i = 1; i < values.length; i++) {
      					String policy = values[i];
      					wait.until(ExpectedConditions.elementToBeClickable(
      							driver.findElement(By.xpath("//span[contains(text(),'" + policy + "')]"))));
      					driver.findElement(By.xpath("//span[contains(text(),'" + policy + "')]")).click();
      				}
      				Thread.sleep(4000);
      				Actions act = new Actions(driver);
      				act.click(driver.findElement(By.xpath("//button[text()='Stats']"))).perform();

      				} else if (values[0].toString().contains("Time")) {
      					String[] time = values[0].toString().split("-");
      					String timeValue = time[1];
      					System.out.println(timeValue);
      					String stri="1M3M6M1Y";
      					if(stri.contains(timeValue))
      					{
      						driver.findElement(By.xpath("//a[text()='"+timeValue +"']")).click();
      					}
      					
      					else
      					{
      						
      					}
      					
      				} else {
      					driver.findElement(By.xpath("//div[@class=\"dashboardCardBody\"]//a[@class=\"dropDownBtn\"]")).click();
      					String dropDownOption = values[0].toString();
      					wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(
      							By.xpath("//div[@class='dashboardCardBody']//a[contains(text(),'" + dropDownOption + "')]"))));
      					driver.findElement(
      							By.xpath("//div[@class='dashboardCardBody']//a[contains(text(),'" + dropDownOption + "')]"))
      							.click();
      				}
      			nlpResponseModel.setMessage("Filters got applied successfully");
      			nlpResponseModel.setStatus(CommonConstants.pass);
      				
      		}
        	  
		} catch (Exception e) {
			nlpResponseModel.setMessage("unable to appply filters"+e.getMessage());
  			nlpResponseModel.setStatus(CommonConstants.fail);
		}
          
          

         
          return nlpResponseModel;
      }
  } 

