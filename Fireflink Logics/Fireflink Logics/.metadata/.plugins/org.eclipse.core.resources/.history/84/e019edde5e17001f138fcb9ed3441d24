
package Business_Logic;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.tyss.optimize.common.util.CommonConstants;
import com.tyss.optimize.nlp.util.Nlp;
import com.tyss.optimize.nlp.util.NlpException;
import com.tyss.optimize.nlp.util.NlpRequestModel;
import com.tyss.optimize.nlp.util.NlpResponseModel;
import com.tyss.optimize.nlp.util.annotation.InputParam;
import com.tyss.optimize.nlp.util.annotation.InputParams;
import com.tyss.optimize.nlp.util.annotation.ReturnType;

import org.springframework.stereotype.Component;

@Component("LIC19774_PJT1002_PE_NLPafbd7021-7516-493b-81ac-8d3f9fee3362")
public class ConvertStringToMap implements Nlp {
	@InputParams({ @InputParam(name = "InputString", type = "java.lang.String") })
	@ReturnType(name = "Map", type = "java.util.Map")

	@Override
	public List<String> getTestParameters() throws NlpException {
		List<String> params = new ArrayList<>();
		return params;
	}

	@Override
	public StringBuilder getTestCode() throws NlpException {
		StringBuilder sb = new StringBuilder();
		return sb;
	}

	@Override
	public NlpResponseModel execute(NlpRequestModel nlpRequestModel) throws NlpException {

		NlpResponseModel nlpResponseModel = new NlpResponseModel();
		Map<String, Object> attributes = nlpRequestModel.getAttributes();
		String input = (String) attributes.get("InputString");

		Map<String, String> map = new HashMap<>();
		String str = input.substring(1, input.length() - 1);

		try {
			String[] pairs = str.split(", ");
			for (String pair : pairs) {
				String[] keyValue = pair.split("=");
				String key = keyValue[0].trim();
				String value = keyValue[1].trim();
				map.put(key, value);
			}
			nlpResponseModel.setStatus(CommonConstants.pass);
			nlpResponseModel.setMessage("Successfully converted String to Map");

		} catch (Exception e) {
			nlpResponseModel.setStatus(CommonConstants.fail);
			nlpResponseModel.setMessage("failed to convert String to Map " + e);
		}

		String string3 = "Return Value";
		nlpResponseModel.getAttributes().put("Map", map);
		return nlpResponseModel;
	}
}